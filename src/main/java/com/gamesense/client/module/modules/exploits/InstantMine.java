package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.event.events.DamageBlockEvent;
import com.gamesense.client.GameSense;
import com.gamesense.client.module.Module;
import com.gamesense.client.module.ModuleManager;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;

import java.util.List;

/**
 * @author Mamdegsox1
 * @since 17/03/2021
 */


public class InstantMine extends Module {
    public InstantMine(){super("InstantMine", Category.Exploits);}

    private EnumFacing lastFace = null;
    public BlockPos lastPos = null;
    private Block lastBlock = null;

    /*
    * How to use in other modules
    *
    * InstantMine insta;
    *
    * insta = (InstantMine) ModuleManager.getModule("instantmine")
    * insta.setPosition(BlockPos EnumFace)
    *
     */





    @EventHandler
    private final Listener<DamageBlockEvent> damageBlockEventListener = new Listener<>(event -> {
        if(!breakCheck(event.getBlockPos()))return;

        for(int i = 0; i < 2; i++){
            mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
        }
        mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
        mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.ABORT_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));

        event.cancel();
        sent = false;
        lastFace = event.getEnumFacing();
        lastPos = event.getBlockPos();
        lastBlock = mc.world.getBlockState(lastPos).getBlock();
    });


    private boolean breakCheck(BlockPos pos) {
        final IBlockState blockState = mc.world.getBlockState(pos);
        final Block block = blockState.getBlock();

        return block.getBlockHardness(blockState, mc.world, pos) != -1;
    }

    boolean sent = false;

    @Override
    public void onUpdate(){

        if(lastPos != null && lastFace != null && lastBlock != null){
            if(mc.player.getHeldItemMainhand().getItem() == Items.DIAMOND_PICKAXE && mc.world.getBlockState(lastPos).getBlock() != Blocks.AIR) {
                mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, lastPos, lastFace));
                sent = true;
            }
            if(mc.world.getBlockState(lastPos).getBlock() == Blocks.AIR) {
                sent = false;
            }
        }
    }

    public void setPosition(final BlockPos blockPos, final EnumFacing face) { // <- used for use in different classes e.g. CevBreaker
        if (!breakCheck(blockPos)) return;

        for (int i = 0; i < 2; i++) {
            mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, blockPos, face));
        }
        mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, blockPos, face));
        mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.ABORT_DESTROY_BLOCK, blockPos, face));

        sent = false;
        lastFace = face;
        lastPos = blockPos;
        lastBlock = mc.world.getBlockState(lastPos).getBlock();
    }
}
