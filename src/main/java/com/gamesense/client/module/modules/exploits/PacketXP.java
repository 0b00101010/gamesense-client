package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.setting.Setting;
import com.gamesense.client.GameSense;
import com.gamesense.client.module.Module;
import net.minecraft.entity.item.EntityXPOrb;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.CPacketPlayer;

import java.util.List;

/**
 * @author Hoosiers
 * @since 12/14/2020
 * @author 0b00101010
 * @since 24/01/2021
 */

public class PacketXP extends Module {

    public PacketXP() {
        super("PacketXP", Category.Exploits);
    }

    Setting.Integer minDamage;
    Setting.Integer maxHeal;
    Setting.Boolean noEntityCollision;
    Setting.Boolean sneakOnly;
    Setting.Boolean predict;

    public void setup() {
        sneakOnly = registerBoolean("Sneak Only", true);
        noEntityCollision = registerBoolean("No Collision", true);
        minDamage = registerInteger("Min Damage", 50, 1, 100);
        maxHeal = registerInteger("Repair To", 90, 1, 100);
        predict = registerBoolean("Predict", false);
    }

    int toMend = 0;

    public void onUpdate() {
        if (mc.player == null || mc.world == null || mc.player.ticksExisted < 10) {
            return;
        }

        int sumOfDamage = 0;

        List<ItemStack> armour = mc.player.inventory.armorInventory;
        for (int i = 0; i < armour.size(); i++) {
            ItemStack itemStack = armour.get(i);
            if (itemStack.isEmpty) {
                continue;
            }

            //this works better than my calculation for some reason, thank you ArmorHUD.java
            float damageOnArmor = (float)(itemStack.getMaxDamage() - itemStack.getItemDamage());
            float damagePercent = 100 - (100 * (1 - damageOnArmor/ itemStack.getMaxDamage()));

            if (damagePercent <= maxHeal.getValue()) {
                if (damagePercent <= minDamage.getValue()) {
                    toMend |= 1 << i;
                }
                if (predict.getValue()) {
                    sumOfDamage += (itemStack.getItemDamage() * maxHeal.getValue() / 100f);
                }
            } else {
                toMend &= ~(1 << i);
            }
        }

        if (toMend > 0) {
            if (predict.getValue()) {
                int totalXp = mc.world.loadedEntityList.stream()
                        .filter(entity -> entity instanceof EntityXPOrb)
                        .filter(entity -> entity.getDistanceSq(mc.player) <= 1)
                        .mapToInt(entity -> ((EntityXPOrb) entity).xpValue).sum();

                if ((totalXp * 2) < sumOfDamage) {
                    mendArmor(mc.player.inventory.currentItem);
                }
            } else {
                mendArmor(mc.player.inventory.currentItem);
            }
        }
    }

    private void mendArmor(int oldSlot) {
        if (noEntityCollision.getValue()) {
            for (EntityPlayer entityPlayer : mc.world.playerEntities) {
                if (entityPlayer.getDistance(mc.player) < 1 && entityPlayer != mc.player) {
                    return;
                }
            }
        }

        if (sneakOnly.getValue() && !mc.player.isSneaking()) {
            return;
        }

        int newSlot = findXPSlot();

        if (newSlot == -1) {
            return;
        }

        if (oldSlot != newSlot) {
            mc.player.inventory.currentItem = newSlot;
        }

        mc.player.connection.sendPacket(new CPacketPlayer.Rotation(0, 90, true));
        mc.rightClickMouse();
        mc.player.inventory.currentItem = oldSlot;
    }

    private int findXPSlot() {
        int slot = -1;

        for (int i = 0; i < 9; i++) {
            if (mc.player.inventory.getStackInSlot(i).getItem() == Items.EXPERIENCE_BOTTLE) {
                slot = i;
                break;
            }
        }

        return slot;
    }
}