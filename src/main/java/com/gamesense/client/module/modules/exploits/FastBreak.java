package com.gamesense.client.module.modules.exploits;

// https://github.com/Kami147/InstantMine/blob/main/InstantMine.java

import com.gamesense.api.event.events.DamageBlockEvent;
import com.gamesense.api.setting.Setting;
import com.gamesense.api.util.misc.Timer;
import com.gamesense.client.GameSense;
import com.gamesense.client.module.Module;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.init.MobEffects;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;

import java.util.ArrayList;

public class FastBreak extends Module {

	public FastBreak() {
		super("FastBreak", Category.Exploits);
	}

	Setting.Mode mode;
	Setting.Boolean haste;

	private Timer breaktimer = new Timer();
	private BlockPos lastBlock;
	private boolean packetCancel = false;
	private EnumFacing direction;

	public void setup() {
		ArrayList<String> Modes = new ArrayList<>();
		Modes.add("Packet");
		Modes.add("Damage");
		Modes.add("Instant");
		Modes.add("Breaker");

		mode = registerMode("Mode", Modes, "Packet");
		haste = registerBoolean("Haste", false);
	}

	public void onUpdate() {
		Minecraft.getMinecraft().playerController.blockHitDelay = 0;

		if (haste.getValue()) {
			PotionEffect effect = new PotionEffect(MobEffects.HASTE, 80950, 1, false, false);
			mc.player.addPotionEffect(new PotionEffect(effect));
		}
		if (!(haste.getValue()) && mc.player.isPotionActive(MobEffects.HASTE)) { //disables haste when you turn the setting off
			mc.player.removePotionEffect(MobEffects.HASTE);
		}
	}

	@EventHandler
	private final Listener<DamageBlockEvent> listener = new Listener<>(event -> {

	if (mc.world == null || mc.player == null) {
		return;
	}
		if (canBreak(event.getBlockPos())) {

			//Packet mine
			if (mode.getValue().equalsIgnoreCase("Packet")) {
				mc.player.swingArm(EnumHand.MAIN_HAND);
				mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
				mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
				event.cancel();
			}

			//Damage
			if (mode.getValue().equalsIgnoreCase("Damage")) {
				if (mc.playerController.curBlockDamageMP >= 0.7f){
					mc.playerController.curBlockDamageMP = 1.0f;
				}
			}

			if (mode.getValue().equalsIgnoreCase("Instant")) {
				mc.player.swingArm(EnumHand.MAIN_HAND);
				mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
				mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing() ));
				mc.playerController.onPlayerDestroyBlock(event.getBlockPos());
				mc.world.setBlockToAir(event.getBlockPos());
			}
			if (mode.getValue().equalsIgnoreCase("Breaker")) {

				if (canBreak(event.getBlockPos())) {

					if (lastBlock == null || event.getBlockPos().x != lastBlock.x || event.getBlockPos().y != lastBlock.y || event.getBlockPos().z != lastBlock.z) {
						//Command.sendChatMessage("New Block");
						packetCancel = false;
						//Command.sendChatMessage(p_Event.getPos()+" : "+lastBlock);
						mc.player.swingArm(EnumHand.MAIN_HAND);
						mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK,
								event.getBlockPos(), event.getEnumFacing()));
						packetCancel = true;
					} else {
						packetCancel = true;
					}
					//Command.sendChatMessage("Breaking");
					mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK,
							event.getBlockPos(), event.getEnumFacing()));

					lastBlock = event.getBlockPos();
					direction = event.getEnumFacing();

					event.cancel();

				}
			}
		}
	});

	private boolean canBreak(BlockPos pos) {
		final IBlockState blockState = mc.world.getBlockState(pos);
		final Block block = blockState.getBlock();
		return block.getBlockHardness(blockState, mc.world, pos) != -1;
	}

	public void onEnable() {
		GameSense.EVENT_BUS.subscribe(this);
	}

	public void onDisable() {
		GameSense.EVENT_BUS.unsubscribe(this);
		mc.player.removePotionEffect(MobEffects.HASTE);
	}
}